using ModManager.Utils;

using System.Text;

namespace ModManager.Data;
public readonly record struct SettingsViewToGenerate
{
	public readonly string DisplayName;
	public readonly string TypeName;
	public readonly string Namespace;
	public readonly List<SettingsEntryData> Entries;

#if DEBUG
	public readonly bool IsDebug = true;
#else
	public readonly bool IsDebug = false;
#endif

	public SettingsViewToGenerate(IPropertySymbol symbol, List<SettingsEntryData> entries)
	{
		DisplayName = $"{symbol.Type.Name}View";
		TypeName = symbol.Type.Name;
		Namespace = symbol.Type.ContainingNamespace.ToDisplayString();
		Entries = entries;
	}

	public readonly string ToCode()
	{
		var code = new CodeBuilder();
		code.AppendLine("// <auto-generated/>");
		code.AppendLine($"using {Namespace};");
		code.AppendLine(string.Empty);
		code.AppendLine("namespace ModManager.Views.Generated;");
		code.AppendLine(string.Empty);
		code.AppendLine($"public partial class {DisplayName} : ReactiveUserControl<{TypeName}>");
		code.StartScope();
		code.AppendLine(string.Empty);

		code.AppendLine($"public {DisplayName}()");
		code.StartScope();
		code.AppendLine("InitializeComponent();");
		code.EndScope();

		code.EndScope();
		return code.ToString();
	}

	public readonly string ToXaml()
	{
		var code = new CodeBuilder();

		int totalRows = 0;

		code.StartScope("");
		code.StartScope("");

		foreach (var entry in Entries)
		{
			if (entry.HideFromUI) continue;

			var textBlockName = $"{entry.PropertyName}TextBlock";
			var tooltipBinding = $"{{Binding ElementName={textBlockName}, Path=(ToolTip.Tip)}}";

			code.AppendLine($"<TextBlock x:Name=\"{textBlockName}\" Text=\"{entry.DisplayName}\" ToolTip.Tip=\"{entry.ToolTip}\" />");
			switch (entry.PropertyType)
			{
				case "Boolean":
					code.AppendLine($"<CheckBox IsChecked=\"{{Binding {entry.PropertyName}}}\" ToolTip.Tip=\"{tooltipBinding}\" />");
					break;
				case "String":
					code.AppendLine($"<TextBox Text=\"{{Binding {entry.PropertyName}}}\" ToolTip.Tip=\"{tooltipBinding}\" />");
					break;
			}
			code.AppendLine(string.Empty);
			totalRows++;
		}
		return @$"
<UserControl
	x:Class=""ModManager.Views.Generated.{DisplayName}""
	xmlns=""https://github.com/avaloniaui""
	xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
	xmlns:d=""http://schemas.microsoft.com/expression/blend/2008""
	xmlns:mc=""http://schemas.openxmlformats.org/markup-compatibility/2006""
	xmlns:controls=""using:ModManager.Controls""
	xmlns:vm=""using:{Namespace}""
	x:DataType=""vm:{TypeName}""
	mc:Ignorable=""d"">
	<controls:AutoGrid RowCount=""{totalRows}"" RowHeight=""auto"">
		<controls:AutoGrid.ColumnDefinitions>
			<ColumnDefinition Width=""auto"" />
			<ColumnDefinition Width=""*"" />
		</controls:AutoGrid.ColumnDefinitions>

		{code.ToString().Trim()}
	</controls:AutoGrid>
</UserControl>
";
	}
}