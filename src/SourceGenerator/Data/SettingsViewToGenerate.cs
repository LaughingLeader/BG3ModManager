using ModManager.SourceGenerator.Utils;

using System.Diagnostics;
using System.Text;
using System.Text.RegularExpressions;

namespace ModManager.SourceGenerator.Data;
public readonly record struct SettingsViewToGenerate
{
	private static readonly Regex _replaceLineBreaksPattern = new(@"\r\n?|\n");
	public readonly string DisplayName;
	public readonly string TypeName;
	public readonly string Namespace;
	public readonly List<SettingsEntryData> Entries;

#if DEBUG
	public readonly bool IsDebug = true;
#else
	public readonly bool IsDebug = false;
#endif

	public readonly string ClassName;

	public SettingsViewToGenerate(IPropertySymbol symbol, List<SettingsEntryData> entries)
	{
		DisplayName = $"{symbol.Type.Name}View";
		TypeName = symbol.Type.Name;
		Namespace = symbol.Type.ContainingNamespace.ToDisplayString();
		Entries = entries;

		ClassName = $"{DisplayName}.axaml";
	}

	public readonly string ToCode()
	{
		var code = new CodeBuilder();
		code.AppendLine("// <auto-generated/>");
		code.AppendLine($"using ModManager.Controls;");
		code.AppendLine($"using {Namespace};");
		code.AppendLine(string.Empty);
		code.AppendLine("namespace ModManager.Views.Generated;");
		code.AppendLine(string.Empty);
		code.AppendLine($"public partial class {DisplayName} : GeneratedUserControl<{TypeName}>");
		code.StartScope();
		code.AppendLine($"public {DisplayName}()");
		code.StartScope();
		code.AppendLine("InitializeComponent();");
		code.EndScope();

		code.EndScope();
		return code.ToString();
	}

	private const string DescriptionAttributeName = "System.ComponentModel.DescriptionAttribute";
	private const string DisplayAttributeName = "System.ComponentModel.DataAnnotations.DisplayAttribute";

	private static AttributeData? GetNameAttribute(ISymbol member)
	{
		foreach(var attribute in member.GetAttributes())
		{
			var attributeClassName = attribute.AttributeClass?.ToDisplayString();
			if (attributeClassName == DescriptionAttributeName || attributeClassName == DisplayAttributeName)
			{
				return attribute;
			}
		}
		return null;
	}

	private static Tuple<string?, string?, string> GetAttributeNameAndToolTip(ISymbol member)
	{
		string? name = null;
		string? tooltip = null;
		string comments = "";

		foreach (var attribute in member.GetAttributes())
		{
			var attributeClassName = attribute.AttributeClass?.ToDisplayString();
			if (attributeClassName == DescriptionAttributeName)
			{
				if (attribute.ConstructorArguments.FirstOrDefault() is var arg && !arg.IsNull)
				{
					tooltip = arg.ToCSharpString().Replace("\"", string.Empty);
				}
				if (string.IsNullOrEmpty(tooltip) && attribute.NamedArguments.FirstOrDefault(x => x.Key == "Name") is var namedArg)
				{
					tooltip = namedArg.Value.ToCSharpString().Replace("\"", string.Empty);
				}
				return Tuple.Create(name, tooltip, comments);
			}
			else if (attributeClassName == DisplayAttributeName)
			{
				for (int i = 0; i < attribute.ConstructorArguments.Length; i++)
				{
					var arg = attribute.ConstructorArguments[i];
					//comments += $"[{i}] = {arg};";
					if (!arg.IsNull)
					{
						if (i == 0)
						{
							name = arg.ToCSharpString().Replace("\"", string.Empty);
						}
						else if (i == 1)
						{
							tooltip = arg.ToCSharpString().Replace("\"", string.Empty);
						}
					}
				}

				//comments += string.Join(";", attribute.NamedArguments.Select(x => $"[{x.Key}] = {x.Value.ToCSharpString()}"));

				foreach(var namedArg in attribute.NamedArguments)
				{
					if(namedArg.Key == "Name")
					{
						name = namedArg.Value.ToCSharpString().Replace("\"", string.Empty);
					}
					else if(namedArg.Key == "Description")
					{
						tooltip = namedArg.Value.ToCSharpString().Replace("\"", string.Empty);
					}
				}
				return Tuple.Create(name, tooltip, comments);
			}
		}
		return Tuple.Create(name, tooltip, comments);
	}

	public readonly string ToXaml()
	{
		var code = new CodeBuilder();

		int totalRows = 0;

		code.StartScope("");
		code.StartScope("");

		foreach (var entry in Entries)
		{
			if (entry.DisableAutoGen) continue;

			var textBlockName = $"{entry.PropertyName}TextBlock";
			var tooltip = entry.ToolTip;
			if (tooltip != null)
			{
				tooltip = _replaceLineBreaksPattern.Replace(tooltip, "&#x0a;");
			}
			var tooltipBinding = tooltip;
			//var tooltipBinding = $"{{Binding ElementName={textBlockName}, Path=(ToolTip.Tip)}}";

			var controlText = "";
			var bindTo = !string.IsNullOrEmpty(entry.BindTo) ? entry.BindTo : entry.PropertyName;
			var isSingleLine = true;
			var addedRightColumn = true;
			var isMultiLine = false;

			//code.AppendLine($"<!--{entry.PropertyName},{entry.DisplayName},{entry.PropertyTypeName},{entry.PropertyType.TypeKind}-->");

			switch (entry.PropertyTypeName)
			{
				case "Boolean":
					controlText = $"<CheckBox Grid.Row=\"{totalRows}\" Grid.Column=\"1\" Classes=\"right\" IsChecked =\"{{Binding {bindTo}}}\" ToolTip.Tip=\"{tooltipBinding}\"";
					break;
				case "String":
					controlText = $"<TextBox Grid.Row=\"{totalRows}\" Grid.Column=\"1\" Classes=\"compact\" Text=\"{{Binding {bindTo}}}\" ToolTip.Tip=\"{tooltipBinding}\"";
					break;
				case "TimeSpan":
					controlText = $"<controls:TimeSpanUpDown Grid.Row=\"{totalRows}\" Grid.Column=\"1\" Classes=\"right\" Value=\"{{Binding {bindTo}}}\" ToolTip.Tip=\"{tooltipBinding}\"";
					break;
				case nameof(Int32):
					controlText = $"<NumericUpDown Grid.Row=\"{totalRows}\" Grid.Column=\"1\" Classes=\"right\" Value=\"{{Binding {bindTo}}}\" ToolTip.Tip=\"{tooltipBinding}\"";
					break;
				default:
					if (entry.PropertyType.TypeKind == TypeKind.Enum)
					{
						var comboCode = new CodeBuilder();
						comboCode.StartScope("");
						comboCode.StartScope("");

						isSingleLine = false;
						var comboText = $"<ComboBox Grid.Row=\"{totalRows}\" Grid.Column=\"1\" Classes=\"right\" SelectedValue=\"{{Binding {bindTo}}}\" ToolTip.Tip=\"{tooltipBinding}\"";
						if (!string.IsNullOrEmpty(entry.BindVisibilityTo))
						{
							comboText += $" IsVisible=\"{{Binding {entry.BindVisibilityTo}}}\"";
						}
						comboText += ">";
						comboCode.AppendLine(comboText);
						comboCode.StartScope("");
						
						foreach(var member in entry.PropertyType.GetMembers())
						{
							//Avoid adding .ctor etc
							if (member.Kind == SymbolKind.Field)
							{
								var (entryName, entryToolTip, comment) = GetAttributeNameAndToolTip(member);
								if (string.IsNullOrWhiteSpace(entryName))
								{
									entryName = member.Name;
								}
								if (string.IsNullOrWhiteSpace(entryToolTip))
								{
									entryToolTip = string.Empty;
								}
								else
								{
									entryToolTip = _replaceLineBreaksPattern.Replace(entryToolTip, "&#x0a;");
								}
								if (!string.IsNullOrWhiteSpace(comment)) comboCode.AppendLine($"<!-- {comment} -->");
								comboCode.AppendLine($"<ComboBoxItem Content=\"{entryName}\" ToolTip.Tip=\"{entryToolTip}\" />");
							}
						}

						comboCode.EndScope("");
						comboCode.AppendLine("</ComboBox>");

						controlText = comboCode.ToString().Trim();
						isMultiLine = true;
					}
					else
					{
						//controlText = $"<TextBlock Tag=\"{entry.PropertyType.TypeKind},{entry.PropertyTypeName}\" Grid.Row=\"{totalRows}\" Grid.Column=\"1\" Classes=\"right\" Value=\"{{Binding {bindTo}}}\" ToolTip.Tip=\"{tooltipBinding}\"";
						addedRightColumn = false;
					}
					break;
			}

			if (!string.IsNullOrWhiteSpace(controlText))
			{
				var labelLine = $"<TextBlock Grid.Row=\"{totalRows}\" Grid.Column=\"0\" Classes=\"left\" Text=\"{entry.DisplayName}\" ToolTip.Tip=\"{tooltip}\"";
				if (!string.IsNullOrEmpty(entry.BindVisibilityTo))
				{
					labelLine += $" IsVisible=\"{{Binding {entry.BindVisibilityTo}}}\"";
				}
				labelLine += " />";
				code.AppendLine(labelLine);

				if (isMultiLine)
				{
					code.AppendLine(controlText);
				}
				else
				{
					if (isSingleLine && addedRightColumn)
					{
						if (!string.IsNullOrEmpty(entry.BindVisibilityTo))
						{
							controlText += $" IsVisible=\"{{Binding {entry.BindVisibilityTo}}}\"";
						}
						controlText += "/>";

						code.AppendLine(controlText);
					}
				}

				code.AppendLine(string.Empty);
				totalRows++;
			}
		}
		var rowDefinitionsStr = string.Join(",", Enumerable.Repeat("Auto", totalRows));
		//var rowDefinitionsStr = string.Join(",", Enumerable.Repeat("*", totalRows));
		return @$"<!--auto-generated-->
<UserControl
	x:Class=""ModManager.Views.Generated.{DisplayName}""
	xmlns=""https://github.com/avaloniaui""
	xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
	xmlns:d=""http://schemas.microsoft.com/expression/blend/2008""
	xmlns:mc=""http://schemas.openxmlformats.org/markup-compatibility/2006""
	xmlns:controls=""using:ModManager.Controls""
	xmlns:vm=""using:{Namespace}""
	x:DataType=""vm:{TypeName}""
	d:DesignHeight=""900""
    d:DesignWidth=""1600""
	mc:Ignorable=""d"">
	<Grid ColumnDefinitions=""*,*"" RowDefinitions=""{rowDefinitionsStr}"">
		{code.ToString().Trim()}
	</Grid>
</UserControl>";
	}
}