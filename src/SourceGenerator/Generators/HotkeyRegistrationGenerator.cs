using ModManager.SourceGenerator.Data;
using ModManager.SourceGenerator.Utils;

using System.Diagnostics;
using System.Text;

namespace ModManager.Generators;

[Generator]
public class HotkeyRegistrationGenerator : IIncrementalGenerator
{
	private const string KeybindingClassAttributeName = "ModManager.KeybindingsAttribute";
	private const string KeybindingAttributeName = "ModManager.KeybindingAttribute";

	private static IEnumerable<ValueTuple<IPropertySymbol, AttributeData>> GetAttributeData(IPropertySymbol propertySymbol)
	{
		foreach (var attribute in propertySymbol.GetAttributes())
		{
			if (attribute == null) continue;

			var attName = attribute.AttributeClass?.ToDisplayString();

			if (attName == KeybindingAttributeName)
			{
				yield return (propertySymbol!, attribute!);
			}
		}
	}

	private static HotkeysToGenerate? GetToGenerate(SemanticModel semanticModel, SyntaxNode declarationSyntax)
	{
		var symbol = semanticModel.GetDeclaredSymbol(declarationSyntax);

		if(symbol is INamedTypeSymbol typeSymbol)
		{
			var entries = new List<HotkeyData>();

			foreach (var prop in typeSymbol.GetMembers())
			{
				if (prop is IPropertySymbol propertySymbol)
				{
					foreach (var entry in GetAttributeData(propertySymbol))
					{
						entries.Add(HotkeyData.FromAttribute(entry.Item1, entry.Item2));
					}
				}
			}

			if (entries.Count > 0)
			{
				return new HotkeysToGenerate(typeSymbol, entries);
			}
		}

		return null;
	}

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var entriesToGenerate = context.SyntaxProvider
			.ForAttributeWithMetadataName(
				KeybindingClassAttributeName,
				static (s, _) => true,
				static (ctx, _) => GetToGenerate(ctx.SemanticModel, ctx.TargetNode))
			.Where(static x => x is not null)
			.Collect()
			.SelectMany((entries, _) => entries.Distinct());

		context.RegisterSourceOutput(entriesToGenerate, Generate);
	}

	private static void Generate(SourceProductionContext context, HotkeysToGenerate? obj)
	{
		if (obj is { } toGenerate)
		{
			var classType = toGenerate.Symbol;
			var className = toGenerate.ClassName;
			Trace.WriteLine($"[HotKeyRegistrationGenerator] Generating {className}");

			var code = new CodeBuilder();
			code.AppendLine("// <auto-generated/>");
			code.AppendLine(string.Empty);
			code.AppendLine($"namespace {classType.ContainingNamespace.ToDisplayString()};");
			code.AppendLine(string.Empty);
			code.AppendLine($"public partial class {classType.Name}");
			code.StartScope();
			code.AppendLine(string.Empty);

			code.AppendLine($"public void RegisterKeybindings()");
			code.StartScope();
			code.AppendLine("var keys = Locator.Current.GetService<AppKeysService>();");
			code.AppendLine("if (keys == null) throw new Exception(\"Failed to get AppKeysService - Is it registered?\");");
			foreach (var entry in toGenerate.Hotkeys)
			{
				code.AppendLine(entry.ToString());
			}
			code.EndScope();

			code.EndScope();

			var result = code.ToString();
			context.AddSource(className, SourceText.From(result, Encoding.UTF8));
		}
	}
}