using Microsoft.CodeAnalysis.Text;

using ModManager.SourceGenerator.Data;
using ModManager.SourceGenerator.Utils;

using System.Text;

namespace ModManager.Generators;

[Generator]
public class HotkeyRegistrationGenerator : IIncrementalGenerator
{
	private const string HotkeyAttributeName = "ModManager.KeybindingAttribute";

	private static IEnumerable<ValueTuple<IPropertySymbol, AttributeData>> GetAttributeData(IPropertySymbol propertySymbol)
	{
		foreach (var attribute in propertySymbol.GetAttributes())
		{
			if (attribute == null) continue;

			var attName = attribute.AttributeClass?.ToDisplayString();

			if (attName == HotkeyAttributeName)
			{
				yield return (propertySymbol!, attribute!);
			}
		}
	}

	private static ValueTuple<INamedTypeSymbol, List<HotkeyData>>? GetToGenerate(SemanticModel semanticModel, SyntaxNode declarationSyntax)
	{
		var symbol = semanticModel.GetDeclaredSymbol(declarationSyntax);

		if (symbol is IPropertySymbol propertySymbol)
		{
			var entries = new List<HotkeyData>();

			foreach (var entry in GetAttributeData(propertySymbol))
			{
				entries.Add(HotkeyData.FromAttribute(entry.Item1, entry.Item2));
			}

			if (entries.Count > 0)
			{
				return (symbol.ContainingType, entries);
			}
		}

		return null;
	}

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var entriesToGenerate = context.SyntaxProvider
			.ForAttributeWithMetadataName(
				HotkeyAttributeName,
				predicate: static (s, _) => true,
				transform: static (ctx, _) => GetToGenerate(ctx.SemanticModel, ctx.TargetNode))
			.Where(static m => m is not null);

		// Generate source code for each enum found
		context.RegisterSourceOutput(entriesToGenerate,
			static (spc, source) => Execute(source, spc));
	}

	static void Execute(in ValueTuple<INamedTypeSymbol, List<HotkeyData>>? toRegister, SourceProductionContext context)
	{
		if (toRegister.HasValue)
		{
			var (classType, entries) = toRegister.Value;

			var className = $"{classType.Name}.Keybindings.g.cs";

			var code = new CodeBuilder();
			code.AppendLine("// <auto-generated/>");
			code.AppendLine(string.Empty);
			code.AppendLine($"namespace {classType.ContainingNamespace.ToDisplayString()};");
			code.AppendLine(string.Empty);
			code.AppendLine($"public partial class {classType.Name}");
			code.StartScope();
				code.AppendLine(string.Empty);

				code.AppendLine($"public void RegisterKeybindings()");
				code.StartScope();
					code.AppendLine("var keys = Locator.Current.GetService<AppKeysService>();");
					code.AppendLine("if (keys == null) throw new Exception(\"Failed to get AppKeysService - Is it registered?\");");
					foreach (var entry in entries)
					{
						code.AppendLine(entry.ToString());
					}
				code.EndScope();

			code.EndScope();

			var result = code.ToString();
			context.AddSource(className, SourceText.From(result, Encoding.UTF8));
		}
	}
}